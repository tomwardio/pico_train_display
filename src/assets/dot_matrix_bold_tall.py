# Code generated by font_to_py.py.
# Font: Dot Matrix Bold Tall.ttf Char set: 0123456789:
# Cmd: ./third_party/font_to_py/font_to_py.py ./third_party/fonts/Dot Matrix Bold Tall.ttf 20 assets/dot_matrix_bold_tall.py -x -c 1234567890:
version = '0.33'

def height():
    return 18

def baseline():
    return 14

def max_width():
    return 18

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 48

def max_ch():
    return 58

_font =\
b'\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x81\x00'\
b'\x81\x00\x81\x00\x81\x00\x81\x00\x81\x00\xff\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x12\x00\x3f\xfc\x00\x3f\xfc\x00\xf0\x0f'\
b'\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00'\
b'\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0'\
b'\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\x3f\xfc\x00\x3f\xfc\x00\x0a\x00'\
b'\x3c\x00\x3c\x00\xfc\x00\xfc\x00\x3c\x00\x3c\x00\x3c\x00\x3c\x00'\
b'\x3c\x00\x3c\x00\x3c\x00\x3c\x00\x3c\x00\x3c\x00\x3c\x00\x3c\x00'\
b'\xff\x00\xff\x00\x12\x00\x3f\xfc\x00\x3f\xfc\x00\xf0\x0f\x00\xf0'\
b'\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x3f\xfc'\
b'\x00\x3f\xfc\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00'\
b'\xf0\x00\x00\xf0\x00\x00\xff\xff\x00\xff\xff\x00\x12\x00\x3f\xfc'\
b'\x00\x3f\xfc\x00\xf0\x0f\x00\xf0\x0f\x00\x00\x0f\x00\x00\x0f\x00'\
b'\x00\x0f\x00\x00\x0f\x00\x0f\xfc\x00\x0f\xfc\x00\x00\x0f\x00\x00'\
b'\x0f\x00\x00\x0f\x00\x00\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\x3f\xfc'\
b'\x00\x3f\xfc\x00\x0e\x00\x03\xf0\x03\xf0\x0f\xf0\x0f\xf0\x3c\xf0'\
b'\x3c\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xff\xf0\xff\xf0\x00\xf0'\
b'\x00\xf0\x00\xf0\x00\xf0\x00\xf0\x00\xf0\x12\x00\xff\xff\x00\xff'\
b'\xff\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00'\
b'\x00\xf0\x00\x00\xff\xfc\x00\xff\xfc\x00\x00\x0f\x00\x00\x0f\x00'\
b'\x00\x0f\x00\x00\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\x3f\xfc\x00\x3f'\
b'\xfc\x00\x12\x00\x3f\xfc\x00\x3f\xfc\x00\xf0\x0f\x00\xf0\x0f\x00'\
b'\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xff\xfc\x00\xff'\
b'\xfc\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f'\
b'\x00\xf0\x0f\x00\x3f\xfc\x00\x3f\xfc\x00\x12\x00\xff\xff\x00\xff'\
b'\xff\x00\x00\x0f\x00\x00\x0f\x00\x00\x3c\x00\x00\x3c\x00\x00\xf0'\
b'\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x03\xc0\x00\x03\xc0\x00'\
b'\x03\xc0\x00\x03\xc0\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f'\
b'\x00\x00\x12\x00\x3f\xfc\x00\x3f\xfc\x00\xf0\x0f\x00\xf0\x0f\x00'\
b'\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\x3f\xfc\x00\x3f'\
b'\xfc\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f'\
b'\x00\xf0\x0f\x00\x3f\xfc\x00\x3f\xfc\x00\x12\x00\x3f\xfc\x00\x3f'\
b'\xfc\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\xf0\x0f'\
b'\x00\xf0\x0f\x00\x3f\xff\x00\x3f\xff\x00\x00\x0f\x00\x00\x0f\x00'\
b'\x00\x0f\x00\x00\x0f\x00\xf0\x0f\x00\xf0\x0f\x00\x3f\xfc\x00\x3f'\
b'\xfc\x00\x06\x00\x00\x00\x00\x00\xf0\xf0\xf0\xf0\x00\x00\xf0\xf0'\
b'\xf0\xf0\x00\x00\x00\x00'

_index =\
b'\x00\x00\x26\x00\x5e\x00\x84\x00\xbc\x00\xf4\x00\x1a\x01\x52\x01'\
b'\x8a\x01\xc2\x01\xfa\x01\x32\x02\x46\x02'

_mvfont = memoryview(_font)
_mvi = memoryview(_index)
ifb = lambda l : l[0] | (l[1] << 8)

def get_ch(ch):
    oc = ord(ch)
    ioff = 2 * (oc - 48 + 1) if oc >= 48 and oc <= 58 else 0
    doff = ifb(_mvi[ioff : ])
    width = ifb(_mvfont[doff : ])

    next_offs = doff + 2 + ((width - 1)//8 + 1) * 18
    return _mvfont[doff + 2:next_offs], 18, width
 
